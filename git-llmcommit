#!/usr/bin/env python3
import os
from openai import OpenAI
from pydantic import BaseModel
import subprocess
import argparse
import json
import sys

def get_staged_files():
    result = subprocess.run(["git", "diff", "--cached", "--name-only"], capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception("Erreur lors de l'exécution de git diff --cached.")
    files = result.stdout.strip().split('\n')
    return [f for f in files if f]  # Filtrer les lignes vides

def get_diff():
    result = subprocess.run(["git", "diff", "--cached"], capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception("Erreur lors de l'exécution de git diff --cached.")
    return result.stdout

def load_file_content(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"Impossible de lire le fichier {file_path}: {e}", file=sys.stderr)
        return ""

def load_modified_files_contents(files):
    contents = {}
    for file in files:
        contents[file] = load_file_content(file)
    return contents

def load_readme():
    readme_files = ['README.md', 'README.rst', 'README']
    for readme in readme_files:
        if os.path.exists(readme):
            return load_file_content(readme)
    return ""

def generate_commit_message(diff, files_contents, readme, user_description=None):

    commit_message = ""


    prompt = "Génère un message de commit Git clair et concis basé sur les informations suivantes.\n\n"

    if user_description:
        prompt += f"Description fournie par l'utilisateur : {user_description}\n\n"

    prompt += "Diff des changements mis en scène :\n"
    prompt += f"{diff}\n\n"

    prompt += "Contenu des fichiers modifiés :\n"
    for file, content in files_contents.items():
        prompt += f"--- {file} ---\n{content}\n\n"

    if readme:
        prompt += f"--- README.md ---\n{readme}\n\n"

    prompt += "Veuillez répondre uniquement avec un objet JSON contenant le champ 'commit_message'."

    # Appel à l'API OpenAI
    try:

        # Configuration de l'API OpenAI
        api_key= os.getenv("OPENAI_API_KEY")

        if not api_key:
            print("Veuillez définir la variable d'environnement OPENAI_API_KEY.", file=sys.stderr)
            sys.exit(1)

        openai = OpenAI(
            api_key=api_key,
        )

        # Structured Result
        class CommitExtraction(BaseModel):
            message: str

        response = openai.beta.chat.completions.parse(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Tu es un assistant utile qui aide à générer des messages de commit Git."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            response_format=CommitExtraction,
            max_tokens=300,
        )

        
        # CHOICE
        if not response.choices or len(response.choices) == 0:
            raise Exception("No choices for the LLM call")
        choice = response.choices[0]

        # MESSAGE
        if not choice.message:
            raise Exception("No choices for the LLM call")
        message = choice.message

        commit_json = json.loads( message.content)
        commit_message = commit_json.get('message', '').strip()

    except Exception as e:
        raise Exception(f"Erreur lors de l'appel à l'API OpenAI : {e}")
    

    return commit_message

def commit_changes(commit_message):
    # Effectuer le commit
    result = subprocess.run(["git", "commit", "-m", commit_message], capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception(f"Erreur lors du commit : {result.stderr}")

def main():

    parser = argparse.ArgumentParser(
        description="Assistant de génération automatique de messages de commit Git.",
        usage="git llmcommit -d 'Description optionnelle des modifications'"
    )
    parser.add_argument('-d', '--description', type=str, help='Description optionnelle des modifications pour fournir du contexte.')
    args = parser.parse_args()

    try:
        # Étape 1: Récupérer les fichiers mis en scène
        staged_files = get_staged_files()
        if not staged_files:
            print("Aucun fichier mis en scène pour le commit.", file=sys.stderr)
            sys.exit(1)

        # Étape 2: Récupérer le diff
        diff = get_diff()

        # Étape 3: Charger les contenus des fichiers
        files_contents = load_modified_files_contents(staged_files)

        # Charger le README si disponible
        readme = load_readme()

        # Étape 4: Générer le message de commit
        commit_message = generate_commit_message(diff, files_contents, readme, args.description)
        if not commit_message:
            print("Impossible de générer un message de commit.", file=sys.stderr)
            sys.exit(1)

        print(f"Message de commit généré : {commit_message}")

        # Étape 5: Effectuer le commit
        commit_changes(commit_message)
        print("Commit effectué avec succès.")

    except Exception as e:
        print(f"Une erreur s'est produite : {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
