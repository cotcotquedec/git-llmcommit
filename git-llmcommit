#!/usr/bin/env python3
import os
from openai import OpenAI
from pydantic import BaseModel
import subprocess
import argparse
import json
import sys

# Global model variable for OpenAI API
OPENAI_MODEL = "gpt-4o"

# Function to get the list of staged files
def get_staged_files():
    """
    Retrieve a list of files that have been staged for commit.
    """
    result = subprocess.run(["git", "diff", "--cached", "--name-only"], capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception("Error executing git diff --cached.")
    files = result.stdout.strip().split('\n')
    return [f for f in files if f]  # Filter out empty lines

# Function to get the diff of staged changes
def get_diff():
    """
    Retrieve the diff of staged changes.
    """
    result = subprocess.run(["git", "diff", "--cached"], capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception("Error executing git diff --cached.")
    return result.stdout

# Function to load the content of a file
def load_file_content(file_path):
    """
    Load the content of a given file.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"Unable to read file {file_path}: {e}", file=sys.stderr)
        return ""

# Function to load the content of modified files
def load_modified_files_contents(files):
    """
    Load the content of all modified files.
    """
    contents = {}
    for file in files:
        contents[file] = load_file_content(file)
    return contents

# Function to generate a commit message using OpenAI
def generate_commit_message(diff, files_contents, user_description=None):
    """
    Generate a commit message based on the diff, file contents, and optional user description.
    """
    commit_message = ""

    prompt = """
Generate a commit message that follows the "Conventional Commits" specification based on a given `git diff`, the final content of the modified files, and an optional description provided by the author.

## Steps
...
    """

    if user_description:
        prompt += "-------- Description provided by the user:\n"
        prompt += f"{user_description}\n\n"

    prompt += "-------- Diff of staged changes:\n"
    prompt += f"{diff}\n\n"

    prompt += "Content of modified files:\n"
    for file, content in files_contents.items():
        prompt += f"--- {file} ---\n{content}\n\n"

    prompt += "Please respond only with a JSON object containing the 'commit_message' field."

    # Call to OpenAI API
    try:
        # OpenAI API Configuration
        api_key = os.getenv("OPENAI_API_KEY")

        if not api_key:
            print("Please set the OPENAI_API_KEY environment variable.", file=sys.stderr)
            sys.exit(1)

        openai = OpenAI(
            api_key=api_key,
        )

        # Structured Result
        class CommitExtraction(BaseModel):
            commit_message: str

        response = openai.beta.chat.completions.parse(
            model=OPENAI_MODEL,
            messages=[
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            response_format=CommitExtraction
        )

        # CHOICE
        if not response.choices or len(response.choices) == 0:
            raise Exception("No choices returned from the LLM call.")
        choice = response.choices[0]

        # MESSAGE
        if not choice.message:
            raise Exception("No message content returned from the LLM call.")
        message = choice.message

        commit_json = json.loads(message.content)
        commit_message = commit_json.get('commit_message', '').strip()

    except Exception as e:
        raise Exception(f"Error calling OpenAI API: {e}")
    
    return commit_message

# Function to commit changes using the generated message
def commit_changes(commit_message):
    """
    Commit the staged changes using the generated commit message.
    """
    result = subprocess.run(["git", "commit", "-m", commit_message], capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception(f"Error during commit: {result.stderr}")

# Main function to parse arguments and execute the script logic
def main():
    """
    Main entry point for the script. Handles argument parsing and orchestrates commit message generation and committing.
    """
    parser = argparse.ArgumentParser(
        description="Automatic Git commit message generation assistant.",
        usage="git llmcommit -d 'Optional description of changes' [--graceful]"
    )
    parser.add_argument('-d', '--description', type=str, help='Optional description of changes to provide context.')
    parser.add_argument('--graceful', action='store_true', help='Only generate the commit message without performing the commit.')
    args = parser.parse_args()

    try:
        # Step 1: Retrieve staged files
        staged_files = get_staged_files()
        if not staged_files:
            print("No files staged for commit.", file=sys.stderr)
            sys.exit(1)

        # Step 2: Retrieve the diff
        diff = get_diff()

        # Step 3: Load file contents
        files_contents = load_modified_files_contents(staged_files)

        # Step 4: Generate the commit message
        commit_message = generate_commit_message(diff, files_contents, args.description)
        if not commit_message:
            print("Unable to generate a commit message.", file=sys.stderr)
            sys.exit(1)

        print(f"Generated commit message: {commit_message}")

        # Step 5: Perform the commit (if not in graceful mode)
        if not args.graceful:
            commit_changes(commit_message)
            print("Commit successful.")

    except Exception as e:
        print(f"An error occurred: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()